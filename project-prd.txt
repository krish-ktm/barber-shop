üíà Product Requirements Document (PRD)
Project: Barber Shop Management System
Phase: UI + Frontend Logic (Dummy Data)

üß© 1. Objective
Design and develop a visually-rich, interactive frontend prototype for a Barber Shop Management System. This prototype will showcase complete user flows and logic using only dummy/mock data. It will serve as a client-approval milestone before backend/database integration begins.

üë• 2. User Roles
Admin

Full system access

Staff and appointment management

Reports and analytics

POS and invoice creation

Staff / Barber

View and manage individual schedules

Handle check-ins and walk-ins

Track earnings and commissions

Access customer notes and history

üéØ 3. Goals (For This Phase)
Implement full frontend logic using mock data

No real API/database integration

Ensure real-time interactivity in UI (where applicable)

Central theme.ts file to control all design tokens (colors, spacing, fonts, etc.)

Prepare UI/UX for seamless backend connection in future

üß± 4. Features (Module Breakdown)
A. Admin Panel
Dashboard

Revenue snapshots (daily, weekly, monthly) using mock data

Graphs (Recharts) for sales & performance

Upcoming appointment preview

Staff Management

Add/Edit/Delete barbers

Assign:

Working hours / days off

Commission percentages

Services offered per barber

Slot Configuration

Define:

Opening & closing hours

Slot durations (15/30/60 min)

Breaks (e.g., lunch, tea)

Weekly availability

Reports & Analytics

Visuals using mock data:

Top-performing staff

Customer behavior

Most booked services

Sales trends

B. Appointment System (Customer-Facing)
Multi-step booking process:

Select service(s)

Choose a barber (optional)

Pick a time slot

View booking summary

Confirmation (mock email)

Cancel/reschedule options with modal prompts

Simulated auto-reminder / no-show handling

C. Staff Portal
View schedule (daily/weekly)

Color-coded: Walk-ins vs. confirmed bookings

Mark check-ins

Cancel/reschedule with reason

Add walk-ins from POS

View customer notes & history

Real-time commission tracking (mock data)

D. POS & Invoicing
Step-by-step invoice flow:

Select/add services

Add custom services

Apply tips, discounts, taxes (optional)

Invoice summary

Export/send mock invoice email

Invoice history with search (by name/date/staff/method)

Settings:

Tax % configuration

Enable/disable tip or discount

Auto-send toggle

E. Auto Logs
Simulated logs for admin/staff actions

Example: ‚ÄúRavi added a 10% discount to Invoice #1023‚Äù

üé® 5. Design & Theme (Updated)
Use ShadCN/UI for all UI components

Use Tailwind CSS for styling and responsive layout

All tokens (colors, font sizes, spacing, radii) must be defined in /theme/theme.ts

Only Light Mode is required (Dark Mode is out of scope)

Adopt a clean, modern White + Black palette:

Token Name	Usage	Color
--primary	Buttons, links, nav	#000000
--background	Page background	#FFFFFF
--card	Card/modals/surfaces	#FFFFFF
--text-primary	Main text	#111111
--text-muted	Secondary text	#555555
--border	Borders, dividers	#E5E5E5
--accent	Hover/focus/interactive	#1E1E1E
--error	Error messages/actions	#DC2626
--warning	Warning states	#D97706
--success	Success states	#059669

All component styling should consume tokens from theme.ts only

Emphasize:

Minimalistic layout

Smooth transitions, hover effects

Optional use of Framer Motion for animation

Fully responsive: desktop, tablet, mobile

üìÅ 6. Suggested Folder Structure
bash
Copy
Edit
/app              # App routing (e.g., Next.js)
/components       # Shared UI components
/features         # Feature modules (dashboard, pos, booking)
/mocks            # Static mock data (JSON/TS)
/pages            # Page-level routing if not using /app
/services         # Helper functions (invoice calc, log sim)
/theme/theme.ts   # Design tokens (color, font, spacing)
/utils            # General utilities and formatters
üöÄ 7. Deliverables
Fully interactive frontend prototype using React + Tailwind + ShadCN

No backend/API ‚Äì dummy data only

All user flows functional (Admin, Staff, Customer-facing)

Key Screens:

Admin dashboard

Staff portal

POS & invoicing

Booking UI

Reports/Analytics

All styling driven by theme.ts

Clean, professional file structure ‚Äî modular and backend-ready

üß™ 8. Out of Scope (This Phase)
No API/backend/database integration

No real authentication or session management

No real email sending ‚Äî use simulated confirmation/reminder

‚úÖ 9. Approval Criteria
UI is consistent, modern, and responsive

All flows are functional using mock data

Code is modular, maintainable, and scalable

theme.ts is used properly across the project

Folder structure follows professional standards

Clean Light Mode interface using white + black palette

Would you like me to follow up with a ready-made theme.ts starter file using this palette and Tailwind-compatible format?







You said:
in admin panel how many navigation items would be ?
ChatGPT said:
For the Admin Panel of the Barber Shop Management System, based on your PRD features, a clean and professional navigation structure should include 7 primary navigation items, each covering a functional module.

‚úÖ Suggested Admin Panel Navigation Items
Dashboard

Overview of revenue, appointments, and quick stats

Appointments

Calendar/schedule view

Upcoming, cancelled, and rescheduled bookings

Staff Management

Add/edit/remove barbers

Assign services, working hours, commissions

Slot Configuration

Set shop hours, slot duration, breaks, availability

Reports & Analytics

Graphs and trends (top staff, most booked services, etc.)

POS & Invoicing

Create invoices, view history, export/send mock emails

Settings

Tax %, toggle tips/discounts, auto-send controls

Optional: access control or theme settings

Optional (Secondary or Footer Menu Items)
Activity Logs (or "Logs")

Simulated admin/staff actions (e.g., ‚ÄúRavi applied 10% discount‚Ä¶‚Äù)

Support/Help (if needed later)

Links to help center or documentation

UI Notes:
Use icons for each nav item (e.g., Lucide or HeroIcons)

Use collapsible side navigation with labels for clarity

Highlight the active route visually (e.g., bg-accent, bold text)

